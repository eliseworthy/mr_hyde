require 'yaml'
require 'open3'

desc "Set up auto-deploy script"
task :setup do

  stdout_str, stderr_str, status = Open3.capture3(command)

  puts "*************"
  puts "Thanks for using our Jekyll auto-generate/deploy script."
  puts "You'll be up and running in no time, just a few questions first..."
  puts "*************"
  user_name = ask "Github Username: "
  system("echo #{user_name}")

  blog_git = ask "Github READ ONLY Blog Url: "
  system("echo #{blog_git}")

  heroku_url = ask "Heroku Git URL: "
  system("echo #{heroku_url}")

  route_name = ask "Preferred Route Name: "
  system("echo #{route_name}")

  # Get Hub for Git Commands
  system("brew install hub")

  # ADD POST RECEIVE URL TO BLOG

  # Setup Buildpack
  system("hub clone austenito/heroku-buildpack-ruby-octopress buildpack")
  Dir.chdir("buildpack")
  system("hub fork")
  system("git remote add upstream git@github.com:#{user_name}/heroku-buildpack-ruby-octopress.git")
  file_name = "config.yml"
  text = File.read(file_name)
  text.gsub!("your blog", blog_git)
  File.open(file_name, "w") {|file| file.write(text) }
  system("rake setup")
  system("git add .")
  system("git commit -m 'Prepare config for auto-deploy'")
  system("git push --force upstream master")
  Dir.chdir("..")

  # Setup Sinatra
  system("hub clone austenito/heroku-octopress-autodeploy sinatra")
  Dir.chdir("sinatra")
  system("git remote add heroku #{heroku_url}")
  system("heroku config:add BUILDPACK_URL=git://github.com/#{user_name}/heroku-buildpack-ruby-octopress.git")
  file_name = "config.yml"
  text = File.read(file_name)
  text.gsub!("foo", route_name)
  File.open(file_name, "w") {|file| file.write(text) }
  system("rake --rakefile setup.rake")
  system("git add .")
  system("git commit -m 'Prepare config for auto-deploy'")
  system("git push --force heroku master")
  Dir.chdir("..")

  # Get rid of everything
  system("rm -Rf sinatra && rm -Rf buildpack")
end

task :destroy do
  system("rm -Rf sinatra && rm -Rf buildpack")
end

def ask message
  print "#{message}"
  STDIN.gets.chomp
end
